<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{90E3A68D-C96D-4764-A1D0-F73D9F474BE4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>logviewer.engine</RootNamespace>
    <AssemblyName>logviewer.engine</AssemblyName>
    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <NuGetPackageImportStamp>b80b685c</NuGetPackageImportStamp>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" $(SnkPath) != '' AND Exists('$(SnkPath)')">
    <AssemblyOriginatorKeyFile>$(SnkPath)</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Debug\logviewer.engine.XML</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Release\logviewer.engine.XML</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Label="YltParsers">
    <Names>Grok</Names>
  </PropertyGroup>
  <PropertyGroup Label="YltProperties">
    <YltTools>$(SolutionDir)packages\YaccLexTools.0.2.2\tools\</YltTools>
    <GplexTool>"$(YltTools)gplex.exe"</GplexTool>
    <GppgTool>"$(YltTools)gppg.exe"</GppgTool>
  </PropertyGroup>
  <PropertyGroup Label="GenerateGrok-logviewer-engine-grammarProperties">
    <Grok-logviewer-engine-grammarParser>$(ProjectDir)grammar\Grok</Grok-logviewer-engine-grammarParser>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="grammar\ReferencePattern.cs" />
    <Compile Include="grammar\Composer.cs" />
    <Compile Include="EncodingDetectedEventArgs.cs" />
    <Compile Include="Extensions.cs" />
    <Compile Include="FileSize.cs" />
    <Compile Include="grammar\GplexBuffers.cs" />
    <Compile Include="grammar\GrokSyntaxException.cs" />
    <Compile Include="grammar\ShiftReduceParserCode.cs" />
    <Compile Include="GrokCompiler.cs" />
    <Compile Include="GrokMatcher.cs" />
    <Compile Include="ICharsetDetector.cs" />
    <Compile Include="grammar\IPattern.cs" />
    <Compile Include="grammar\PassthroughPattern.cs" />
    <Compile Include="grammar\Pattern.cs" />
    <Compile Include="LoadProgress.cs" />
    <Compile Include="LogLevel.cs" />
    <Compile Include="LogMessage.cs" />
    <Compile Include="LogReader.cs" />
    <Compile Include="ParserType.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="GrokRule.cs" />
    <Compile Include="RulesBuilder.cs" />
    <Compile Include="Semantic.cs" />
    <Compile Include="SemanticProperty.cs" />
    <Compile Include="SizeUnit.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="grok.patterns">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Include="Install.ps1" />
    <None Include="logviewer.engine.nuspec" />
    <None Include="packages.config">
      <SubType>Designer</SubType>
    </None>
    <None Include="webservers.patterns">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>
  <ItemGroup Label="Grok-logviewer-engine-grammarFiles">
    <Compile Include="grammar\Grok.Parser.cs">
      <DependentUpon>Grok.parser</DependentUpon>
    </Compile>
    <Compile Include="grammar\Grok.Parser.Generated.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Grok.Language.grammar.y</DependentUpon>
    </Compile>
    <Compile Include="grammar\Grok.Scanner.cs">
      <DependentUpon>Grok.parser</DependentUpon>
    </Compile>
    <Compile Include="grammar\Grok.Scanner.Generated.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Grok.Language.analyzer.lex</DependentUpon>
    </Compile>
    <None Include="grammar\Grok.Language.analyzer.lex">
      <DependentUpon>Grok.parser</DependentUpon>
    </None>
    <None Include="grammar\Grok.Language.grammar.y">
      <DependentUpon>Grok.parser</DependentUpon>
    </None>
    <None Include="grammar\Grok.parser" />
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Target Name="AfterBuild">
    <PropertyGroup Condition="$(KeyFile) != '' AND $(CertPassword) != '' AND $(SignTool) != '' AND Exists('$(KeyFile)')">
      <SignCommand>"$(SignTool)" sign /f "$(KeyFile)" /p $(CertPassword) /t http://timestamp.globalsign.com/scripts/timstamp.dll /v /d "logviewer" /du https://github.com/aegoroff/logviewer %251</SignCommand>
    </PropertyGroup>
    <PropertyGroup Condition="$(SignCommand) != ''">
      <TmpFile>tmp.bat</TmpFile>
    </PropertyGroup>
    <WriteLinesToFile File="$(TmpFile)" Condition="$(SignCommand) != ''" Lines="$(SignCommand)" />
    <Exec Condition="$(SignCommand) != ''" Command="$(TmpFile) &quot;$(OutputPath)$(AssemblyName).dll&quot; &gt; NUL 2&gt;&amp;1" WorkingDirectory="$(MsBuildThisFileDirectory)" />
    <Delete Files="$(TmpFile)" Condition="$(SignCommand) != ''" />
  </Target>
  <Target Name="BeforeBuild" DependsOnTargets="YltBuildGen" />
  <Target Name="YltBuildGen" DependsOnTargets="GenerateGrok-logviewer-engine-grammar" />
  <Target Name="GenerateGrok-logviewer-engine-grammar" Inputs="$(Grok-logviewer-engine-grammarParser).Language.analyzer.lex;$(Grok-logviewer-engine-grammarParser).Language.grammar.y" Outputs="$(Grok-logviewer-engine-grammarParser).Scanner.Generated.cs;$(Grok-logviewer-engine-grammarParser).Parser.Generated.cs">
    <Message Text="Generating scanner for $(Grok-logviewer-engine-grammarParser) ..." />
    <Exec Command="$(GplexTool) &quot;/out:$(Grok-logviewer-engine-grammarParser).Scanner.Generated.cs&quot; &quot;$(Grok-logviewer-engine-grammarParser).Language.analyzer.lex&quot;" WorkingDirectory="$(ProjectDir)" Outputs="$(GenDir)Scanner.cs">
      <Output TaskParameter="Outputs" ItemName="GrokScanner" />
    </Exec>
    <Message Text="Generating parser for $(Grok-logviewer-engine-grammarParser) ..." />
    <Exec Command="$(GppgTool) /no-lines /gplex &quot;$(Grok-logviewer-engine-grammarParser).Language.grammar.y&quot; &gt; &quot;$(Grok-logviewer-engine-grammarParser).Parser.Generated.cs&quot;" WorkingDirectory="$(ProjectDir)" Outputs="$(Grok-logviewer-engine-grammarParser).Parser.Generated.cs">
      <Output TaskParameter="Outputs" ItemName="Grok" />
    </Exec>
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>